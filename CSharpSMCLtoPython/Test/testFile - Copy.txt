declare client Millionaires: # class Millionaires(Client)
	tunnelof sint netWorth;  # self.tunnels["netWorth"] = Tunnel("netWorth", 0, True)
	
	function void ask() { # def ask():
		netWorth.put(readInt()); # self.tunnels["netWorth"].put(raw_input())
	}
	
	function void tell(bool b) {
		if (b) {
			display("You are the richest");
		}
		else {
			display("Make more money");
		}
	}
	
	function void main() {
		ask();
	}

declare client pippo:
	tunnelof sbool sb; # self.tunnels["netWorth"] = Tunnel("sb", True, True)
	function void main() {
		
	}
	
declare client Impiegato:
	tunnelof sint;
	function void main() {
		
	}
	
declare server Max: # class Max(Server)	
# init...
	groupof Millionaires mills; # self.groups["mills"] = @listofMillionaires ip:port
	groupof pippo p;	# self.groups["p"] = @listofp ip:port
	groupof Impiegato imps;
	
	function bool checkTypes(int one, sint two, client three, sclient four, bool five, sbool six) {
		int i = 1;
		sint si = 2;
		client c;
		sclient sc;
		bool b = True;
		sbool sb = False;
		
		si = i;
		sc = c;
		sb = b;
		i = open(si|si);
		c = open(sc|sc);
		b = open(sb|sb);
		
		i = 3;
		si = 4;
		b = False;
		sb = True;
		

	}
	
	function void main() {
		sint max = 0;
		sclient rich;
		
		client three;
		
		checkTypes(1, 2, three, three, True, False);
		
		for (client c in mills) { # for (c in self.groups["mills"]):
			sint nw = c.netWorth.get(); # nw = __tunnelCall(c, "netWorth", "get")
			c.tell(True) # self.__remoteCall(c, "tell", True)
			if (nw > max) {
				max = nw;
				rich = c;
			}
		}

	}