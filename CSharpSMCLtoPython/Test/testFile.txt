declare client Millionaires:
	tunnelof sint netWorth;

	function void ask() {
		netWorth.put(readInt());
	}

	function void tell(bool b) {
		if (b) {
			display("You are the richest");
		}
		else {
			display("Make more money");
		}
	}

	function void main() {
		ask();
	}

declare client Employees:
	tunnelof sint toPay;
	tunnelof sbool serverNeedMoreMoney;

	function void itNeedsMore(bool b) {
		if (b) {
			display("need more");
		}
		else {
			display("is enough");
		}
			
	}
	
	function sint cyclePay() {
		sint x = 0;
		while ( x < 100) {
			x = readInt();
		}
		return x;
	}

	function void main() {

		toPay.put(cyclePay());
	}


declare server Max:
	groupof Millionaires mills;
	groupof Employees emps;

	function bool checkTypes(int one, sint two, client three, sclient four, bool five, sbool six) {
		int i = 1;
		sint si = 2;
		client c;
		sclient sc;
		bool b = True;
		sbool sb = False;
		int x = 2;
		
		si = i;
		sc = c;
		sb = b;
		i = open(si+x|si);
		c = open(sc|sc);
		b = open(sb|sb);
		
		i = 3;
		si = 4;
		b = False;
		sb = True;
	}


	function void main() {
		sint max = 0;
		sclient rich;
		
		client three;
		
		checkTypes(1, 2, three, three, True, False);
		
		for (client c in mills) {
			sint nw = c.netWorth.get();
			if (nw > max) {
				max = nw;
				rich = c;
			}
		}
		
		for (client c in mills) {
			if (c == open(rich|rich)) {
				c.tell(True);
			}
			else {
				c.tell(False);
			}
		}

		for (client c in emps) {
			sint p = c.toPay.take();
			if (p < 666) {
				c.itNeedsMore(True);
			}
			else {
				c.itNeedsMore(False);
			}
		}


	}